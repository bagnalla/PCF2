# Church Bools
tru = \t => \f => t;
fls = \t => \f => f;

# Pairs of Nats (function from Bool to Nat)
mkPair = \n => \m => \b => if b then m else n;
fst = \p => p false;
snd = \p => p true;

# Logical operations on Bools
not = \x => if x then false else true;
and = \x => \y => if x then y else false;
nand = \x => \y => not (and x y);
or = \x => \y => if x then true else y;
xor = \x => \y => if x then not y else y;
xnor = \x => \y => not (xor x y);

# wrappers around succ and pred
suc = \x => succ x;
prd = \x => pred x;

# Nat equality
equal = fix (
  \f => \n => \m =>
    if iszero n then iszero m else
    and (not (iszero m)) (f (pred n) (pred m))
);

# less-than
lt = fix (
  \f => \n => \m =>
  if iszero n then not (iszero m) else
  and (not (iszero m)) (f (pred n) (pred m))
);

# less-than-or-equal
le = fix (
  \f => \n => \m =>
    if iszero n then true else
    and (not (iszero m)) (f (pred n) (pred m))
);

# greater-than
gt = \n => \m => not (le m n);

# greater-than-or-equal
ge = \n => \m => not (lt m n);

# addition
plus = fix (
  \f => \n => \m =>
    if iszero n then m else succ (f (pred n) m)
);

# subtraction
minus = fix (
  \f => \n => \m =>
    if iszero m then n else f (pred n) (pred m)
);

# multiplication
mult = fix (
  \f => \n => \m =>
    if iszero m then 0 else
    if iszero (pred m) then n else
    plus n (f n (pred m))
);

# division (n / 0 = 0)
div = fix (
  \f => \n => \m =>
    if or (iszero m) (lt n m) then 0 else
    succ (f (minus n m) m)
);

# exponentiation
pow = fix (
  \f => \n => \m =>
    if iszero m then 1 else
    if iszero (pred m) then n else
    mult n (f n (pred m))
);

# factorial
fact = fix (
  \f => \n =>
    if iszero n then 1 else
    mult n (f (pred n))
);
